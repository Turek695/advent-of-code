const dummy8_1: string = `............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............`;
const test8_1: string = `....................8.D.........Y...........c.....
....f.............D......O...........Y............
.......z..........7.N..........g..................
..........h...........9g.7....................Y...
.............8...............................c....
...9..8...............L........D....O.....l.......
..........f.9.......h.........................l...
...z...B..........................................
.................M.....C.....OR7.Y..g..........l..
........................M.......N.................
...............h..................TD....H.........
......z......M........C8.......N.......m.T........
......O.......................................A...
...........a...........h..........................
................B..................j..............
..............v..f..........g.....................
.......N..........s.M.........n..............Q....
...............s.........j.......................A
......................a......................T...b
........s....v......H..c..............j..i....m...
.......................a........2H.......m..V.....
................n.B..........o.....H......2.......
.....3.......s.B..............x......S..K.........
.3.G..................J................V...l.x..T.
....3.......................E..................V..
3..........................E..........V...i.......
...............v.......n.E...................2.i..
..F.........r.e......n....E...........A..Q.....K..
..z................................A....Q.........
.................................b..Q...d.Sw......
..G...0..e............v.......Z...j.....m...b.....
..y.............0.a.............................K.
.............Gp....Z.................4......S.....
....oJ....G........e.........Z............b.X.....
C........o.r........WL..1.......X........K.....d..
..................Z1.....r...............F........
............L.4................1.6..............tF
...y...............L......1............26.t.......
......e.k......y........I......x......d........t.R
.......0.........k...............d.........tWR..x.
..........q.....r......J..................F..P..w.
..........................5..........XwW..........
...........0....y.............J.............6p....
..q...k.......................I.....4........SR...
.........q..o.......P................W............
.............q.IP..............................p..
.....k...................w.............X.......f..
.............P...............4..................p.
.................I..........5.....................
.C.................................5...6..........`;

console.log(`dummy antinodes is ${findAntinodes(dummy8_1)} and should be 34`);
console.log(`dummy antinodes is ${findAntinodes(test8_1)} and should be 1277`);

function findAntinodes(input: string): number {
    const city: string[][] = input.split('\n').map(line => line.split(''));
    if (city.length <= 14) {
        console.table(city);
    }

    interface Position {
        r: number,
        c: number,
    }
    interface Antenna extends Position {
        frequency: string,
    }

    const antennas: Antenna[] = findAntennas(city);


    return getAntinodes(antennas);

    function findAntennas(city: string[][]): Antenna[] {
        const antennas: Antenna[] = [];
        for (let i = 0; i < city.length; i++) {
            for (let j = 0; j < city[i].length; j++) {
                if (city[i][j] !== '.') {
                    antennas.push({ frequency: city[i][j], r: i, c: j });
                }
            }
        }
        return antennas;
    }

    function getAntinodes(antennas: Antenna[]): number {
        const antennaFrequencies: string[] = [...new Set(antennas.map(a => a.frequency))];
        for (const frequency of antennaFrequencies) {
            const antennasOfFrequency: Antenna[] = antennas.filter(a => a.frequency === frequency);
            for (let i = 0; i < antennasOfFrequency.length; i++) {
                const a1 = antennasOfFrequency[i];
                for (let j = i + 1; j < antennasOfFrequency.length; j++) {
                    const a2 = antennasOfFrequency[j];
                    const diff: Position = { r: a1.r - a2.r, c: a1.c - a2.c };
                    const diffMinus: Position = { r: -diff.r, c: -diff.c };
                    checkAndCountHarmonic(a1, diff);
                    checkAndCountHarmonic(a2, diffMinus)
                }
            }
        }

        if (city.length <= 14) {
            console.table(city);
        }
        const countAntinodesInCity: number = city.reduce((acc, row) => acc + row.filter(c => c === '#').length, 0);
        return countAntinodesInCity;

        function checkAndCountHarmonic(antinode: Position, diff: Position): void {
            const isInCity: boolean = city[antinode.r]?.[antinode.c] !== undefined;
            if (isInCity) {
                city[antinode.r][antinode.c] = '#';

                const newAntinode: Position = { r: antinode.r + diff.r, c: antinode.c + diff.c };

                checkAndCountHarmonic(newAntinode, diff);
            }
        }
    }
}
